
ad5693_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000251c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800262c  0800262c  0000362c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002658  08002658  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002658  08002658  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002658  08002658  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002658  08002658  00003658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800265c  0800265c  0000365c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002660  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  0800266c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  0800266c  00004084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e30  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f4  00000000  00000000  00009e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000b360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000546  00000000  00000000  0000ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e59  00000000  00000000  0000bf9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e5e  00000000  00000000  00022df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081daa  00000000  00000000  0002cc55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae9ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb8  00000000  00000000  000aea44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000b06fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002614 	.word	0x08002614

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002614 	.word	0x08002614

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__gesf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpsf2+0x4>
 8000932:	bf00      	nop

08000934 <__lesf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpsf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpsf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000948:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800094c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000950:	bf18      	it	ne
 8000952:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000956:	d011      	beq.n	800097c <__cmpsf2+0x40>
 8000958:	b001      	add	sp, #4
 800095a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800095e:	bf18      	it	ne
 8000960:	ea90 0f01 	teqne	r0, r1
 8000964:	bf58      	it	pl
 8000966:	ebb2 0003 	subspl.w	r0, r2, r3
 800096a:	bf88      	it	hi
 800096c:	17c8      	asrhi	r0, r1, #31
 800096e:	bf38      	it	cc
 8000970:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000974:	bf18      	it	ne
 8000976:	f040 0001 	orrne.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000980:	d102      	bne.n	8000988 <__cmpsf2+0x4c>
 8000982:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000986:	d105      	bne.n	8000994 <__cmpsf2+0x58>
 8000988:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800098c:	d1e4      	bne.n	8000958 <__cmpsf2+0x1c>
 800098e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000992:	d0e1      	beq.n	8000958 <__cmpsf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cfrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4608      	mov	r0, r1
 80009a0:	4661      	mov	r1, ip
 80009a2:	e7ff      	b.n	80009a4 <__aeabi_cfcmpeq>

080009a4 <__aeabi_cfcmpeq>:
 80009a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80009a6:	f7ff ffc9 	bl	800093c <__cmpsf2>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	bf48      	it	mi
 80009ae:	f110 0f00 	cmnmi.w	r0, #0
 80009b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080009b4 <__aeabi_fcmpeq>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff fff4 	bl	80009a4 <__aeabi_cfcmpeq>
 80009bc:	bf0c      	ite	eq
 80009be:	2001      	moveq	r0, #1
 80009c0:	2000      	movne	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_fcmplt>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffea 	bl	80009a4 <__aeabi_cfcmpeq>
 80009d0:	bf34      	ite	cc
 80009d2:	2001      	movcc	r0, #1
 80009d4:	2000      	movcs	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_fcmple>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffe0 	bl	80009a4 <__aeabi_cfcmpeq>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_fcmpge>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffd2 	bl	800099c <__aeabi_cfrcmple>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_fcmpgt>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffc8 	bl	800099c <__aeabi_cfrcmple>
 8000a0c:	bf34      	ite	cc
 8000a0e:	2001      	movcc	r0, #1
 8000a10:	2000      	movcs	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_GPIO_Init+0x58>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4a13      	ldr	r2, [pc, #76]	@ (8000a70 <MX_GPIO_Init+0x58>)
 8000a24:	f043 0320 	orr.w	r3, r3, #32
 8000a28:	6193      	str	r3, [r2, #24]
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_GPIO_Init+0x58>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f003 0320 	and.w	r3, r3, #32
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <MX_GPIO_Init+0x58>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <MX_GPIO_Init+0x58>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <MX_GPIO_Init+0x58>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <MX_GPIO_Init+0x58>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a07      	ldr	r2, [pc, #28]	@ (8000a70 <MX_GPIO_Init+0x58>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <MX_GPIO_Init+0x58>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	40021000 	.word	0x40021000

08000a74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a7a:	4a13      	ldr	r2, [pc, #76]	@ (8000ac8 <MX_I2C1_Init+0x54>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a80:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <MX_I2C1_Init+0x58>)
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000ab2:	f000 fc3f 	bl	8001334 <HAL_I2C_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000abc:	f000 f8bc 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000028 	.word	0x20000028
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	000186a0 	.word	0x000186a0

08000ad0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a15      	ldr	r2, [pc, #84]	@ (8000b40 <HAL_I2C_MspInit+0x70>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d123      	bne.n	8000b38 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <HAL_I2C_MspInit+0x74>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a13      	ldr	r2, [pc, #76]	@ (8000b44 <HAL_I2C_MspInit+0x74>)
 8000af6:	f043 0308 	orr.w	r3, r3, #8
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <HAL_I2C_MspInit+0x74>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0308 	and.w	r3, r3, #8
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b08:	23c0      	movs	r3, #192	@ 0xc0
 8000b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0c:	2312      	movs	r3, #18
 8000b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480b      	ldr	r0, [pc, #44]	@ (8000b48 <HAL_I2C_MspInit+0x78>)
 8000b1c:	f000 fa86 	bl	800102c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <HAL_I2C_MspInit+0x74>)
 8000b22:	69db      	ldr	r3, [r3, #28]
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <HAL_I2C_MspInit+0x74>)
 8000b26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b2a:	61d3      	str	r3, [r2, #28]
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <HAL_I2C_MspInit+0x74>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40005400 	.word	0x40005400
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010c00 	.word	0x40010c00

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b50:	f000 f902 	bl	8000d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f000 f816 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f7ff ff5e 	bl	8000a18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b5c:	f7ff ff8a 	bl	8000a74 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  AD5693_Reset();
 8000b60:	f001 fc80 	bl	8002464 <AD5693_Reset>
  HAL_Delay(10);
 8000b64:	200a      	movs	r0, #10
 8000b66:	f000 f959 	bl	8000e1c <HAL_Delay>
  AD5693_Config();
 8000b6a:	f000 f851 	bl	8000c10 <AD5693_Config>
  HAL_Delay(10);
 8000b6e:	200a      	movs	r0, #10
 8000b70:	f000 f954 	bl	8000e1c <HAL_Delay>
  AD5693_Set_Voltage(2.6);
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <main+0x34>)
 8000b76:	f001 fcd3 	bl	8002520 <AD5693_Set_Voltage>
//  AD5693_Reset();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <main+0x2e>
 8000b7e:	bf00      	nop
 8000b80:	40266666 	.word	0x40266666

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b090      	sub	sp, #64	@ 0x40
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0318 	add.w	r3, r7, #24
 8000b8e:	2228      	movs	r2, #40	@ 0x28
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fd12 	bl	80025bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000baa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bc2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 f84d 	bl	8001c6c <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bd8:	f000 f82e 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	230f      	movs	r3, #15
 8000bde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be0:	2302      	movs	r3, #2
 8000be2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 faba 	bl	8002170 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c02:	f000 f819 	bl	8000c38 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3740      	adds	r7, #64	@ 0x40
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <AD5693_Config>:

/* USER CODE BEGIN 4 */
void AD5693_Config(void){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	ad5693.gain_x2 		= false;
 8000c14:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <AD5693_Config+0x24>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	705a      	strb	r2, [r3, #1]
	ad5693.ref_disable	= false;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <AD5693_Config+0x24>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
	ad5693.dac_op 		= normal_mode;
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <AD5693_Config+0x24>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	709a      	strb	r2, [r3, #2]
	AD5693_Init(ad5693);
 8000c26:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <AD5693_Config+0x24>)
 8000c28:	6818      	ldr	r0, [r3, #0]
 8000c2a:	f001 fc3b 	bl	80024a4 <AD5693_Init>
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000007c 	.word	0x2000007c

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <Error_Handler+0x8>

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_MspInit+0x5c>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ca0 <HAL_MspInit+0x5c>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <HAL_MspInit+0x5c>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <HAL_MspInit+0x5c>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca0 <HAL_MspInit+0x5c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <HAL_MspInit+0x5c>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <HAL_MspInit+0x60>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <HAL_MspInit+0x60>)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010000 	.word	0x40010000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <NMI_Handler+0x4>

08000cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <MemManage_Handler+0x4>

08000cc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf8:	f000 f874 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <Reset_Handler>:
 8000d0c:	f7ff fff8 	bl	8000d00 <SystemInit>
 8000d10:	480b      	ldr	r0, [pc, #44]	@ (8000d40 <LoopFillZerobss+0xe>)
 8000d12:	490c      	ldr	r1, [pc, #48]	@ (8000d44 <LoopFillZerobss+0x12>)
 8000d14:	4a0c      	ldr	r2, [pc, #48]	@ (8000d48 <LoopFillZerobss+0x16>)
 8000d16:	2300      	movs	r3, #0
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:
 8000d1a:	58d4      	ldr	r4, [r2, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:
 8000d20:	18c4      	adds	r4, r0, r3
 8000d22:	428c      	cmp	r4, r1
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
 8000d26:	4a09      	ldr	r2, [pc, #36]	@ (8000d4c <LoopFillZerobss+0x1a>)
 8000d28:	4c09      	ldr	r4, [pc, #36]	@ (8000d50 <LoopFillZerobss+0x1e>)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:
 8000d32:	42a2      	cmp	r2, r4
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>
 8000d36:	f001 fc49 	bl	80025cc <__libc_init_array>
 8000d3a:	f7ff ff07 	bl	8000b4c <main>
 8000d3e:	4770      	bx	lr
 8000d40:	20000000 	.word	0x20000000
 8000d44:	2000000c 	.word	0x2000000c
 8000d48:	08002660 	.word	0x08002660
 8000d4c:	2000000c 	.word	0x2000000c
 8000d50:	20000084 	.word	0x20000084

08000d54 <ADC1_2_IRQHandler>:
 8000d54:	e7fe      	b.n	8000d54 <ADC1_2_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_Init+0x28>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <HAL_Init+0x28>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f92b 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	200f      	movs	r0, #15
 8000d70:	f000 f808 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff ff66 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40022000 	.word	0x40022000

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <HAL_InitTick+0x54>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_InitTick+0x58>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f935 	bl	8001012 <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00e      	b.n	8000dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d80a      	bhi.n	8000dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f000 f90b 	bl	8000fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4a06      	ldr	r2, [pc, #24]	@ (8000de0 <HAL_InitTick+0x5c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <HAL_IncTick+0x1c>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <HAL_IncTick+0x20>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a03      	ldr	r2, [pc, #12]	@ (8000e04 <HAL_IncTick+0x20>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000080 	.word	0x20000080

08000e08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b02      	ldr	r3, [pc, #8]	@ (8000e18 <HAL_GetTick+0x10>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	20000080 	.word	0x20000080

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff fff0 	bl	8000e08 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <HAL_Delay+0x44>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffe0 	bl	8000e08 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	@ (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	@ (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	@ 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff90 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff49 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff5e 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff90 	bl	8000f1c <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5f 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffb0 	bl	8000f80 <SysTick_Config>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b08b      	sub	sp, #44	@ 0x2c
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103e:	e169      	b.n	8001314 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001040:	2201      	movs	r2, #1
 8001042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	429a      	cmp	r2, r3
 800105a:	f040 8158 	bne.w	800130e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	4a9a      	ldr	r2, [pc, #616]	@ (80012cc <HAL_GPIO_Init+0x2a0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d05e      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001068:	4a98      	ldr	r2, [pc, #608]	@ (80012cc <HAL_GPIO_Init+0x2a0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d875      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 800106e:	4a98      	ldr	r2, [pc, #608]	@ (80012d0 <HAL_GPIO_Init+0x2a4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d058      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001074:	4a96      	ldr	r2, [pc, #600]	@ (80012d0 <HAL_GPIO_Init+0x2a4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d86f      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 800107a:	4a96      	ldr	r2, [pc, #600]	@ (80012d4 <HAL_GPIO_Init+0x2a8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d052      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001080:	4a94      	ldr	r2, [pc, #592]	@ (80012d4 <HAL_GPIO_Init+0x2a8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d869      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 8001086:	4a94      	ldr	r2, [pc, #592]	@ (80012d8 <HAL_GPIO_Init+0x2ac>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d04c      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 800108c:	4a92      	ldr	r2, [pc, #584]	@ (80012d8 <HAL_GPIO_Init+0x2ac>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d863      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 8001092:	4a92      	ldr	r2, [pc, #584]	@ (80012dc <HAL_GPIO_Init+0x2b0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d046      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001098:	4a90      	ldr	r2, [pc, #576]	@ (80012dc <HAL_GPIO_Init+0x2b0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d85d      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d82a      	bhi.n	80010f8 <HAL_GPIO_Init+0xcc>
 80010a2:	2b12      	cmp	r3, #18
 80010a4:	d859      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 80010a6:	a201      	add	r2, pc, #4	@ (adr r2, 80010ac <HAL_GPIO_Init+0x80>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	08001127 	.word	0x08001127
 80010b0:	08001101 	.word	0x08001101
 80010b4:	08001113 	.word	0x08001113
 80010b8:	08001155 	.word	0x08001155
 80010bc:	0800115b 	.word	0x0800115b
 80010c0:	0800115b 	.word	0x0800115b
 80010c4:	0800115b 	.word	0x0800115b
 80010c8:	0800115b 	.word	0x0800115b
 80010cc:	0800115b 	.word	0x0800115b
 80010d0:	0800115b 	.word	0x0800115b
 80010d4:	0800115b 	.word	0x0800115b
 80010d8:	0800115b 	.word	0x0800115b
 80010dc:	0800115b 	.word	0x0800115b
 80010e0:	0800115b 	.word	0x0800115b
 80010e4:	0800115b 	.word	0x0800115b
 80010e8:	0800115b 	.word	0x0800115b
 80010ec:	0800115b 	.word	0x0800115b
 80010f0:	08001109 	.word	0x08001109
 80010f4:	0800111d 	.word	0x0800111d
 80010f8:	4a79      	ldr	r2, [pc, #484]	@ (80012e0 <HAL_GPIO_Init+0x2b4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010fe:	e02c      	b.n	800115a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	623b      	str	r3, [r7, #32]
          break;
 8001106:	e029      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	3304      	adds	r3, #4
 800110e:	623b      	str	r3, [r7, #32]
          break;
 8001110:	e024      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	3308      	adds	r3, #8
 8001118:	623b      	str	r3, [r7, #32]
          break;
 800111a:	e01f      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	330c      	adds	r3, #12
 8001122:	623b      	str	r3, [r7, #32]
          break;
 8001124:	e01a      	b.n	800115c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800112e:	2304      	movs	r3, #4
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e013      	b.n	800115c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d105      	bne.n	8001148 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800113c:	2308      	movs	r3, #8
 800113e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	611a      	str	r2, [r3, #16]
          break;
 8001146:	e009      	b.n	800115c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001148:	2308      	movs	r3, #8
 800114a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	615a      	str	r2, [r3, #20]
          break;
 8001152:	e003      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
          break;
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x130>
          break;
 800115a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2bff      	cmp	r3, #255	@ 0xff
 8001160:	d801      	bhi.n	8001166 <HAL_GPIO_Init+0x13a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	e001      	b.n	800116a <HAL_GPIO_Init+0x13e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3304      	adds	r3, #4
 800116a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2bff      	cmp	r3, #255	@ 0xff
 8001170:	d802      	bhi.n	8001178 <HAL_GPIO_Init+0x14c>
 8001172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x152>
 8001178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117a:	3b08      	subs	r3, #8
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	210f      	movs	r1, #15
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	401a      	ands	r2, r3
 8001190:	6a39      	ldr	r1, [r7, #32]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	431a      	orrs	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80b1 	beq.w	800130e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011ac:	4b4d      	ldr	r3, [pc, #308]	@ (80012e4 <HAL_GPIO_Init+0x2b8>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a4c      	ldr	r2, [pc, #304]	@ (80012e4 <HAL_GPIO_Init+0x2b8>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b4a      	ldr	r3, [pc, #296]	@ (80012e4 <HAL_GPIO_Init+0x2b8>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011c4:	4a48      	ldr	r2, [pc, #288]	@ (80012e8 <HAL_GPIO_Init+0x2bc>)
 80011c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4013      	ands	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a40      	ldr	r2, [pc, #256]	@ (80012ec <HAL_GPIO_Init+0x2c0>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d013      	beq.n	8001218 <HAL_GPIO_Init+0x1ec>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a3f      	ldr	r2, [pc, #252]	@ (80012f0 <HAL_GPIO_Init+0x2c4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d00d      	beq.n	8001214 <HAL_GPIO_Init+0x1e8>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a3e      	ldr	r2, [pc, #248]	@ (80012f4 <HAL_GPIO_Init+0x2c8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d007      	beq.n	8001210 <HAL_GPIO_Init+0x1e4>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a3d      	ldr	r2, [pc, #244]	@ (80012f8 <HAL_GPIO_Init+0x2cc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d101      	bne.n	800120c <HAL_GPIO_Init+0x1e0>
 8001208:	2303      	movs	r3, #3
 800120a:	e006      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 800120c:	2304      	movs	r3, #4
 800120e:	e004      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 8001210:	2302      	movs	r3, #2
 8001212:	e002      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 8001218:	2300      	movs	r3, #0
 800121a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800121c:	f002 0203 	and.w	r2, r2, #3
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	4093      	lsls	r3, r2
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800122a:	492f      	ldr	r1, [pc, #188]	@ (80012e8 <HAL_GPIO_Init+0x2bc>)
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001244:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	492c      	ldr	r1, [pc, #176]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	608b      	str	r3, [r1, #8]
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001252:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	43db      	mvns	r3, r3
 800125a:	4928      	ldr	r1, [pc, #160]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 800125c:	4013      	ands	r3, r2
 800125e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800126c:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	4922      	ldr	r1, [pc, #136]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	60cb      	str	r3, [r1, #12]
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800127a:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	43db      	mvns	r3, r3
 8001282:	491e      	ldr	r1, [pc, #120]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 8001284:	4013      	ands	r3, r2
 8001286:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4918      	ldr	r1, [pc, #96]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4914      	ldr	r1, [pc, #80]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d021      	beq.n	8001300 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012bc:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	490e      	ldr	r1, [pc, #56]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
 80012c8:	e021      	b.n	800130e <HAL_GPIO_Init+0x2e2>
 80012ca:	bf00      	nop
 80012cc:	10320000 	.word	0x10320000
 80012d0:	10310000 	.word	0x10310000
 80012d4:	10220000 	.word	0x10220000
 80012d8:	10210000 	.word	0x10210000
 80012dc:	10120000 	.word	0x10120000
 80012e0:	10110000 	.word	0x10110000
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	40010800 	.word	0x40010800
 80012f0:	40010c00 	.word	0x40010c00
 80012f4:	40011000 	.word	0x40011000
 80012f8:	40011400 	.word	0x40011400
 80012fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <HAL_GPIO_Init+0x304>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	43db      	mvns	r3, r3
 8001308:	4909      	ldr	r1, [pc, #36]	@ (8001330 <HAL_GPIO_Init+0x304>)
 800130a:	4013      	ands	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001310:	3301      	adds	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	fa22 f303 	lsr.w	r3, r2, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	f47f ae8e 	bne.w	8001040 <HAL_GPIO_Init+0x14>
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	372c      	adds	r7, #44	@ 0x2c
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	40010400 	.word	0x40010400

08001334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e12b      	b.n	800159e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fbb8 	bl	8000ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2224      	movs	r2, #36	@ 0x24
 8001364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0201 	bic.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001386:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001396:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001398:	f001 f832 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 800139c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4a81      	ldr	r2, [pc, #516]	@ (80015a8 <HAL_I2C_Init+0x274>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d807      	bhi.n	80013b8 <HAL_I2C_Init+0x84>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4a80      	ldr	r2, [pc, #512]	@ (80015ac <HAL_I2C_Init+0x278>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	bf94      	ite	ls
 80013b0:	2301      	movls	r3, #1
 80013b2:	2300      	movhi	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	e006      	b.n	80013c6 <HAL_I2C_Init+0x92>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4a7d      	ldr	r2, [pc, #500]	@ (80015b0 <HAL_I2C_Init+0x27c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	bf94      	ite	ls
 80013c0:	2301      	movls	r3, #1
 80013c2:	2300      	movhi	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0e7      	b.n	800159e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4a78      	ldr	r2, [pc, #480]	@ (80015b4 <HAL_I2C_Init+0x280>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0c9b      	lsrs	r3, r3, #18
 80013d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a6a      	ldr	r2, [pc, #424]	@ (80015a8 <HAL_I2C_Init+0x274>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d802      	bhi.n	8001408 <HAL_I2C_Init+0xd4>
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3301      	adds	r3, #1
 8001406:	e009      	b.n	800141c <HAL_I2C_Init+0xe8>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	4a69      	ldr	r2, [pc, #420]	@ (80015b8 <HAL_I2C_Init+0x284>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	099b      	lsrs	r3, r3, #6
 800141a:	3301      	adds	r3, #1
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	430b      	orrs	r3, r1
 8001422:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800142e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	495c      	ldr	r1, [pc, #368]	@ (80015a8 <HAL_I2C_Init+0x274>)
 8001438:	428b      	cmp	r3, r1
 800143a:	d819      	bhi.n	8001470 <HAL_I2C_Init+0x13c>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1e59      	subs	r1, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fbb1 f3f3 	udiv	r3, r1, r3
 800144a:	1c59      	adds	r1, r3, #1
 800144c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001450:	400b      	ands	r3, r1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00a      	beq.n	800146c <HAL_I2C_Init+0x138>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1e59      	subs	r1, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fbb1 f3f3 	udiv	r3, r1, r3
 8001464:	3301      	adds	r3, #1
 8001466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146a:	e051      	b.n	8001510 <HAL_I2C_Init+0x1dc>
 800146c:	2304      	movs	r3, #4
 800146e:	e04f      	b.n	8001510 <HAL_I2C_Init+0x1dc>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d111      	bne.n	800149c <HAL_I2C_Init+0x168>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1e58      	subs	r0, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	440b      	add	r3, r1
 8001486:	fbb0 f3f3 	udiv	r3, r0, r3
 800148a:	3301      	adds	r3, #1
 800148c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001490:	2b00      	cmp	r3, #0
 8001492:	bf0c      	ite	eq
 8001494:	2301      	moveq	r3, #1
 8001496:	2300      	movne	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	e012      	b.n	80014c2 <HAL_I2C_Init+0x18e>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1e58      	subs	r0, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	0099      	lsls	r1, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_I2C_Init+0x196>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e022      	b.n	8001510 <HAL_I2C_Init+0x1dc>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10e      	bne.n	80014f0 <HAL_I2C_Init+0x1bc>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1e58      	subs	r0, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6859      	ldr	r1, [r3, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	440b      	add	r3, r1
 80014e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ee:	e00f      	b.n	8001510 <HAL_I2C_Init+0x1dc>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1e58      	subs	r0, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	0099      	lsls	r1, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	fbb0 f3f3 	udiv	r3, r0, r3
 8001506:	3301      	adds	r3, #1
 8001508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	6809      	ldr	r1, [r1, #0]
 8001514:	4313      	orrs	r3, r2
 8001516:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69da      	ldr	r2, [r3, #28]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800153e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6911      	ldr	r1, [r2, #16]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68d2      	ldr	r2, [r2, #12]
 800154a:	4311      	orrs	r1, r2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	430b      	orrs	r3, r1
 8001552:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0201 	orr.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2220      	movs	r2, #32
 800158a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	000186a0 	.word	0x000186a0
 80015ac:	001e847f 	.word	0x001e847f
 80015b0:	003d08ff 	.word	0x003d08ff
 80015b4:	431bde83 	.word	0x431bde83
 80015b8:	10624dd3 	.word	0x10624dd3

080015bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	461a      	mov	r2, r3
 80015c8:	460b      	mov	r3, r1
 80015ca:	817b      	strh	r3, [r7, #10]
 80015cc:	4613      	mov	r3, r2
 80015ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff fc1a 	bl	8000e08 <HAL_GetTick>
 80015d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b20      	cmp	r3, #32
 80015e0:	f040 80e0 	bne.w	80017a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2319      	movs	r3, #25
 80015ea:	2201      	movs	r2, #1
 80015ec:	4970      	ldr	r1, [pc, #448]	@ (80017b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f000 f964 	bl	80018bc <I2C_WaitOnFlagUntilTimeout>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015fa:	2302      	movs	r3, #2
 80015fc:	e0d3      	b.n	80017a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_I2C_Master_Transmit+0x50>
 8001608:	2302      	movs	r3, #2
 800160a:	e0cc      	b.n	80017a6 <HAL_I2C_Master_Transmit+0x1ea>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b01      	cmp	r3, #1
 8001620:	d007      	beq.n	8001632 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0201 	orr.w	r2, r2, #1
 8001630:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001640:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2221      	movs	r2, #33	@ 0x21
 8001646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2210      	movs	r2, #16
 800164e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	893a      	ldrh	r2, [r7, #8]
 8001662:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001668:	b29a      	uxth	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4a50      	ldr	r2, [pc, #320]	@ (80017b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001672:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001674:	8979      	ldrh	r1, [r7, #10]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	6a3a      	ldr	r2, [r7, #32]
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f89c 	bl	80017b8 <I2C_MasterRequestWrite>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e08d      	b.n	80017a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016a0:	e066      	b.n	8001770 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	6a39      	ldr	r1, [r7, #32]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 fa22 	bl	8001af0 <I2C_WaitOnTXEFlagUntilTimeout>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00d      	beq.n	80016ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d107      	bne.n	80016ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e06b      	b.n	80017a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b04      	cmp	r3, #4
 800170a:	d11b      	bne.n	8001744 <HAL_I2C_Master_Transmit+0x188>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001710:	2b00      	cmp	r3, #0
 8001712:	d017      	beq.n	8001744 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800172e:	b29b      	uxth	r3, r3
 8001730:	3b01      	subs	r3, #1
 8001732:	b29a      	uxth	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	6a39      	ldr	r1, [r7, #32]
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f000 fa19 	bl	8001b80 <I2C_WaitOnBTFFlagUntilTimeout>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00d      	beq.n	8001770 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	2b04      	cmp	r3, #4
 800175a:	d107      	bne.n	800176c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800176a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e01a      	b.n	80017a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001774:	2b00      	cmp	r3, #0
 8001776:	d194      	bne.n	80016a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2220      	movs	r2, #32
 800178c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e000      	b.n	80017a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017a4:	2302      	movs	r3, #2
  }
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	00100002 	.word	0x00100002
 80017b4:	ffff0000 	.word	0xffff0000

080017b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af02      	add	r7, sp, #8
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	460b      	mov	r3, r1
 80017c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d006      	beq.n	80017e2 <I2C_MasterRequestWrite+0x2a>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d003      	beq.n	80017e2 <I2C_MasterRequestWrite+0x2a>
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80017e0:	d108      	bne.n	80017f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e00b      	b.n	800180c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f8:	2b12      	cmp	r3, #18
 80017fa:	d107      	bne.n	800180c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800180a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 f84f 	bl	80018bc <I2C_WaitOnFlagUntilTimeout>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00d      	beq.n	8001840 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800182e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001832:	d103      	bne.n	800183c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800183a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e035      	b.n	80018ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001848:	d108      	bne.n	800185c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800184a:	897b      	ldrh	r3, [r7, #10]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001858:	611a      	str	r2, [r3, #16]
 800185a:	e01b      	b.n	8001894 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800185c:	897b      	ldrh	r3, [r7, #10]
 800185e:	11db      	asrs	r3, r3, #7
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f003 0306 	and.w	r3, r3, #6
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f063 030f 	orn	r3, r3, #15
 800186c:	b2da      	uxtb	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	490e      	ldr	r1, [pc, #56]	@ (80018b4 <I2C_MasterRequestWrite+0xfc>)
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 f898 	bl	80019b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e010      	b.n	80018ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800188a:	897b      	ldrh	r3, [r7, #10]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	4907      	ldr	r1, [pc, #28]	@ (80018b8 <I2C_MasterRequestWrite+0x100>)
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 f888 	bl	80019b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	00010008 	.word	0x00010008
 80018b8:	00010002 	.word	0x00010002

080018bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	4613      	mov	r3, r2
 80018ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018cc:	e048      	b.n	8001960 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d4:	d044      	beq.n	8001960 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018d6:	f7ff fa97 	bl	8000e08 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d302      	bcc.n	80018ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d139      	bne.n	8001960 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d10d      	bne.n	8001912 <I2C_WaitOnFlagUntilTimeout+0x56>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	43da      	mvns	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	4013      	ands	r3, r2
 8001902:	b29b      	uxth	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf0c      	ite	eq
 8001908:	2301      	moveq	r3, #1
 800190a:	2300      	movne	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	e00c      	b.n	800192c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	43da      	mvns	r2, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	4013      	ands	r3, r2
 800191e:	b29b      	uxth	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	429a      	cmp	r2, r3
 8001930:	d116      	bne.n	8001960 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2220      	movs	r2, #32
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	f043 0220 	orr.w	r2, r3, #32
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e023      	b.n	80019a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	0c1b      	lsrs	r3, r3, #16
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d10d      	bne.n	8001986 <I2C_WaitOnFlagUntilTimeout+0xca>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	43da      	mvns	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	4013      	ands	r3, r2
 8001976:	b29b      	uxth	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	e00c      	b.n	80019a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	43da      	mvns	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4013      	ands	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf0c      	ite	eq
 8001998:	2301      	moveq	r3, #1
 800199a:	2300      	movne	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d093      	beq.n	80018ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019be:	e071      	b.n	8001aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ce:	d123      	bne.n	8001a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80019e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	f043 0204 	orr.w	r2, r3, #4
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e067      	b.n	8001ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1e:	d041      	beq.n	8001aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a20:	f7ff f9f2 	bl	8000e08 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d302      	bcc.n	8001a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d136      	bne.n	8001aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	0c1b      	lsrs	r3, r3, #16
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d10c      	bne.n	8001a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	e00b      	b.n	8001a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	43da      	mvns	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	4013      	ands	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf14      	ite	ne
 8001a6c:	2301      	movne	r3, #1
 8001a6e:	2300      	moveq	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d016      	beq.n	8001aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f043 0220 	orr.w	r2, r3, #32
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e021      	b.n	8001ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	0c1b      	lsrs	r3, r3, #16
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d10c      	bne.n	8001ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf14      	ite	ne
 8001ac0:	2301      	movne	r3, #1
 8001ac2:	2300      	moveq	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	e00b      	b.n	8001ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf14      	ite	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	2300      	moveq	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f47f af6d 	bne.w	80019c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001afc:	e034      	b.n	8001b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f886 	bl	8001c10 <I2C_IsAcknowledgeFailed>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e034      	b.n	8001b78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d028      	beq.n	8001b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b16:	f7ff f977 	bl	8000e08 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d302      	bcc.n	8001b2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d11d      	bne.n	8001b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b36:	2b80      	cmp	r3, #128	@ 0x80
 8001b38:	d016      	beq.n	8001b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2220      	movs	r2, #32
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	f043 0220 	orr.w	r2, r3, #32
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e007      	b.n	8001b78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b72:	2b80      	cmp	r3, #128	@ 0x80
 8001b74:	d1c3      	bne.n	8001afe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b8c:	e034      	b.n	8001bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f83e 	bl	8001c10 <I2C_IsAcknowledgeFailed>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e034      	b.n	8001c08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d028      	beq.n	8001bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba6:	f7ff f92f 	bl	8000e08 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d302      	bcc.n	8001bbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d11d      	bne.n	8001bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d016      	beq.n	8001bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	f043 0220 	orr.w	r2, r3, #32
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e007      	b.n	8001c08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d1c3      	bne.n	8001b8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c26:	d11b      	bne.n	8001c60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	f043 0204 	orr.w	r2, r3, #4
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e272      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8087 	beq.w	8001d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c8c:	4b92      	ldr	r3, [pc, #584]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d00c      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c98:	4b8f      	ldr	r3, [pc, #572]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d112      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb0:	d10b      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb2:	4b89      	ldr	r3, [pc, #548]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d06c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x12c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d168      	bne.n	8001d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e24c      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x76>
 8001cd4:	4b80      	ldr	r3, [pc, #512]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e02e      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x98>
 8001cea:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a7a      	ldr	r2, [pc, #488]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b78      	ldr	r3, [pc, #480]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a77      	ldr	r2, [pc, #476]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e01d      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0xbc>
 8001d0e:	4b72      	ldr	r3, [pc, #456]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a71      	ldr	r2, [pc, #452]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d28:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b68      	ldr	r3, [pc, #416]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a67      	ldr	r2, [pc, #412]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff f85e 	bl	8000e08 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff f85a 	bl	8000e08 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	@ 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e200      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0xe4>
 8001d6e:	e014      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff f84a 	bl	8000e08 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff f846 	bl	8000e08 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	@ 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1ec      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	4b53      	ldr	r3, [pc, #332]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x10c>
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d063      	beq.n	8001e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001db2:	4b49      	ldr	r3, [pc, #292]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d11c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
 8001dbe:	4b46      	ldr	r3, [pc, #280]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d116      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e1c0      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4939      	ldr	r1, [pc, #228]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	e03a      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e00:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7fe ffff 	bl	8000e08 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7fe fffb 	bl	8000e08 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e1a1      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4927      	ldr	r1, [pc, #156]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e015      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b26      	ldr	r3, [pc, #152]	@ (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7fe ffde 	bl	8000e08 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7fe ffda 	bl	8000e08 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e180      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03a      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d019      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e82:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7fe ffbe 	bl	8000e08 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7fe ffba 	bl	8000e08 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e160      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f000 faba 	bl	8002428 <RCC_Delay>
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7fe ffa4 	bl	8000e08 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec2:	e00f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7fe ffa0 	bl	8000e08 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d908      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e146      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	42420000 	.word	0x42420000
 8001ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee4:	4b92      	ldr	r3, [pc, #584]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1e9      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80a6 	beq.w	800204a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f02:	4b8b      	ldr	r3, [pc, #556]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10d      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b88      	ldr	r3, [pc, #544]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a87      	ldr	r2, [pc, #540]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b85      	ldr	r3, [pc, #532]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b82      	ldr	r3, [pc, #520]	@ (8002134 <HAL_RCC_OscConfig+0x4c8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d118      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f36:	4b7f      	ldr	r3, [pc, #508]	@ (8002134 <HAL_RCC_OscConfig+0x4c8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8002134 <HAL_RCC_OscConfig+0x4c8>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f42:	f7fe ff61 	bl	8000e08 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4a:	f7fe ff5d 	bl	8000e08 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b64      	cmp	r3, #100	@ 0x64
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e103      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4b75      	ldr	r3, [pc, #468]	@ (8002134 <HAL_RCC_OscConfig+0x4c8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x312>
 8001f70:	4b6f      	ldr	r3, [pc, #444]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a6e      	ldr	r2, [pc, #440]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	e02d      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x334>
 8001f86:	4b6a      	ldr	r3, [pc, #424]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4a69      	ldr	r2, [pc, #420]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6213      	str	r3, [r2, #32]
 8001f92:	4b67      	ldr	r3, [pc, #412]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a66      	ldr	r2, [pc, #408]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	6213      	str	r3, [r2, #32]
 8001f9e:	e01c      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x356>
 8001fa8:	4b61      	ldr	r3, [pc, #388]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a60      	ldr	r2, [pc, #384]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e00b      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a5a      	ldr	r2, [pc, #360]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	4b58      	ldr	r3, [pc, #352]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a57      	ldr	r2, [pc, #348]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d015      	beq.n	800200e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7fe ff11 	bl	8000e08 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7fe ff0d 	bl	8000e08 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0b1      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	4b4b      	ldr	r3, [pc, #300]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ee      	beq.n	8001fea <HAL_RCC_OscConfig+0x37e>
 800200c:	e014      	b.n	8002038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7fe fefb 	bl	8000e08 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7fe fef7 	bl	8000e08 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e09b      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	4b40      	ldr	r3, [pc, #256]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1ee      	bne.n	8002016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d105      	bne.n	800204a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b3c      	ldr	r3, [pc, #240]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a3b      	ldr	r2, [pc, #236]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8087 	beq.w	8002162 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002054:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d061      	beq.n	8002124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d146      	bne.n	80020f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002068:	4b33      	ldr	r3, [pc, #204]	@ (8002138 <HAL_RCC_OscConfig+0x4cc>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7fe fecb 	bl	8000e08 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002076:	f7fe fec7 	bl	8000e08 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e06d      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800209c:	d108      	bne.n	80020b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209e:	4b24      	ldr	r3, [pc, #144]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4921      	ldr	r1, [pc, #132]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a19      	ldr	r1, [r3, #32]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c0:	430b      	orrs	r3, r1
 80020c2:	491b      	ldr	r1, [pc, #108]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7fe fe9b 	bl	8000e08 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d6:	f7fe fe97 	bl	8000e08 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e03d      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x46a>
 80020f4:	e035      	b.n	8002162 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <HAL_RCC_OscConfig+0x4cc>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7fe fe84 	bl	8000e08 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe fe80 	bl	8000e08 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e026      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x498>
 8002122:	e01e      	b.n	8002162 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d107      	bne.n	800213c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e019      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
 8002130:	40021000 	.word	0x40021000
 8002134:	40007000 	.word	0x40007000
 8002138:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_OscConfig+0x500>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	429a      	cmp	r2, r3
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0d0      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b6a      	ldr	r3, [pc, #424]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d910      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b67      	ldr	r3, [pc, #412]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 0207 	bic.w	r2, r3, #7
 800219a:	4965      	ldr	r1, [pc, #404]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b63      	ldr	r3, [pc, #396]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0b8      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4b59      	ldr	r3, [pc, #356]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a58      	ldr	r2, [pc, #352]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e4:	4b53      	ldr	r3, [pc, #332]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a52      	ldr	r2, [pc, #328]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b50      	ldr	r3, [pc, #320]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	494d      	ldr	r1, [pc, #308]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d040      	beq.n	8002290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b47      	ldr	r3, [pc, #284]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e07f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222e:	4b41      	ldr	r3, [pc, #260]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e073      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223e:	4b3d      	ldr	r3, [pc, #244]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e06b      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224e:	4b39      	ldr	r3, [pc, #228]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f023 0203 	bic.w	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4936      	ldr	r1, [pc, #216]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002260:	f7fe fdd2 	bl	8000e08 <HAL_GetTick>
 8002264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	e00a      	b.n	800227e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002268:	f7fe fdce 	bl	8000e08 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e053      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	4b2d      	ldr	r3, [pc, #180]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 020c 	and.w	r2, r3, #12
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	429a      	cmp	r2, r3
 800228e:	d1eb      	bne.n	8002268 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002290:	4b27      	ldr	r3, [pc, #156]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d210      	bcs.n	80022c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b24      	ldr	r3, [pc, #144]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 0207 	bic.w	r2, r3, #7
 80022a6:	4922      	ldr	r1, [pc, #136]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b20      	ldr	r3, [pc, #128]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e032      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022cc:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4916      	ldr	r1, [pc, #88]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ea:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	490e      	ldr	r1, [pc, #56]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fe:	f000 f821 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8002302:	4602      	mov	r2, r0
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	490a      	ldr	r1, [pc, #40]	@ (8002338 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	5ccb      	ldrb	r3, [r1, r3]
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	4a09      	ldr	r2, [pc, #36]	@ (800233c <HAL_RCC_ClockConfig+0x1cc>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_RCC_ClockConfig+0x1d0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fd30 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40022000 	.word	0x40022000
 8002334:	40021000 	.word	0x40021000
 8002338:	0800262c 	.word	0x0800262c
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800235e:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b04      	cmp	r3, #4
 800236c:	d002      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x30>
 800236e:	2b08      	cmp	r3, #8
 8002370:	d003      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x36>
 8002372:	e027      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002374:	4b19      	ldr	r3, [pc, #100]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002376:	613b      	str	r3, [r7, #16]
      break;
 8002378:	e027      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	0c9b      	lsrs	r3, r3, #18
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	4a17      	ldr	r2, [pc, #92]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002384:	5cd3      	ldrb	r3, [r2, r3]
 8002386:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d010      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002392:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	0c5b      	lsrs	r3, r3, #17
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	4a11      	ldr	r2, [pc, #68]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800239e:	5cd3      	ldrb	r3, [r2, r3]
 80023a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x98>)
 80023a6:	fb03 f202 	mul.w	r2, r3, r2
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e004      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a0c      	ldr	r2, [pc, #48]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	613b      	str	r3, [r7, #16]
      break;
 80023c2:	e002      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x98>)
 80023c6:	613b      	str	r3, [r7, #16]
      break;
 80023c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ca:	693b      	ldr	r3, [r7, #16]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	371c      	adds	r7, #28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	007a1200 	.word	0x007a1200
 80023e0:	08002644 	.word	0x08002644
 80023e4:	08002654 	.word	0x08002654
 80023e8:	003d0900 	.word	0x003d0900

080023ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f0:	4b02      	ldr	r3, [pc, #8]	@ (80023fc <HAL_RCC_GetHCLKFreq+0x10>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	20000000 	.word	0x20000000

08002400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002404:	f7ff fff2 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	4903      	ldr	r1, [pc, #12]	@ (8002424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	0800263c 	.word	0x0800263c

08002428 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002430:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <RCC_Delay+0x34>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <RCC_Delay+0x38>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0a5b      	lsrs	r3, r3, #9
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002444:	bf00      	nop
  }
  while (Delay --);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1e5a      	subs	r2, r3, #1
 800244a:	60fa      	str	r2, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f9      	bne.n	8002444 <RCC_Delay+0x1c>
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	20000000 	.word	0x20000000
 8002460:	10624dd3 	.word	0x10624dd3

08002464 <AD5693_Reset>:
 *      reference https://github.com/adafruit/Adafruit_AD569x
 */

#include "ad5693.h"

HAL_StatusTypeDef AD5693_Reset(void){
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af02      	add	r7, sp, #8
	uint8_t command = WRITE_CONTROL_REG;		// Command Byte
 800246a:	2340      	movs	r3, #64	@ 0x40
 800246c:	71fb      	strb	r3, [r7, #7]
	uint8_t highByte = 0b10000000;				// Data High, Reset bit High
 800246e:	2380      	movs	r3, #128	@ 0x80
 8002470:	71bb      	strb	r3, [r7, #6]
	uint8_t lowByte = 0b00000000;				// Data Low
 8002472:	2300      	movs	r3, #0
 8002474:	717b      	strb	r3, [r7, #5]

	// Combine the command and data into a single 3-byte buffer
	uint8_t buffer[3] = {command, highByte, lowByte};
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	703b      	strb	r3, [r7, #0]
 800247a:	79bb      	ldrb	r3, [r7, #6]
 800247c:	707b      	strb	r3, [r7, #1]
 800247e:	797b      	ldrb	r3, [r7, #5]
 8002480:	70bb      	strb	r3, [r7, #2]
	uint8_t status = HAL_I2C_Master_Transmit(I2C_HANDLE,
 8002482:	463a      	mov	r2, r7
 8002484:	230a      	movs	r3, #10
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2303      	movs	r3, #3
 800248a:	2198      	movs	r1, #152	@ 0x98
 800248c:	4804      	ldr	r0, [pc, #16]	@ (80024a0 <AD5693_Reset+0x3c>)
 800248e:	f7ff f895 	bl	80015bc <HAL_I2C_Master_Transmit>
 8002492:	4603      	mov	r3, r0
 8002494:	713b      	strb	r3, [r7, #4]
			AD5693_ADDRESS, buffer, 3, 10);
	return status;
 8002496:	793b      	ldrb	r3, [r7, #4]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000028 	.word	0x20000028

080024a4 <AD5693_Init>:

HAL_StatusTypeDef AD5693_Init(ad5693_configuration_t ad5693){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	6078      	str	r0, [r7, #4]
	// Prepare the command byte
	uint8_t command = WRITE_CONTROL_REG;
 80024ac:	2340      	movs	r3, #64	@ 0x40
 80024ae:	75fb      	strb	r3, [r7, #23]

	// Prepare the high and low data bytes
	uint16_t data = 0x0000;
 80024b0:	2300      	movs	r3, #0
 80024b2:	82bb      	strh	r3, [r7, #20]
	data |= ((uint16_t)ad5693.dac_op << 13); // Set D14 and D13 for the operating mode
 80024b4:	79bb      	ldrb	r3, [r7, #6]
 80024b6:	035b      	lsls	r3, r3, #13
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	82bb      	strh	r3, [r7, #20]
	data |= ((uint16_t)ad5693.ref_disable << 12); // Set D12 for enable_ref
 80024c4:	793b      	ldrb	r3, [r7, #4]
 80024c6:	031b      	lsls	r3, r3, #12
 80024c8:	b21a      	sxth	r2, r3
 80024ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	b21b      	sxth	r3, r3
 80024d2:	82bb      	strh	r3, [r7, #20]
	data |= ((uint16_t)ad5693.gain_x2 << 11);      // Set D11 for the gain
 80024d4:	797b      	ldrb	r3, [r7, #5]
 80024d6:	02db      	lsls	r3, r3, #11
 80024d8:	b21a      	sxth	r2, r3
 80024da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	82bb      	strh	r3, [r7, #20]

	uint8_t highByte = (data >> 8) & 0xFF;
 80024e4:	8abb      	ldrh	r3, [r7, #20]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	74fb      	strb	r3, [r7, #19]
	uint8_t lowByte = data & 0xFF;
 80024ec:	8abb      	ldrh	r3, [r7, #20]
 80024ee:	74bb      	strb	r3, [r7, #18]

	// Combine the command and data into a single 3-byte buffer
	uint8_t buffer[3] = {command, highByte, lowByte};
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
 80024f2:	733b      	strb	r3, [r7, #12]
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	737b      	strb	r3, [r7, #13]
 80024f8:	7cbb      	ldrb	r3, [r7, #18]
 80024fa:	73bb      	strb	r3, [r7, #14]
	uint8_t status = HAL_I2C_Master_Transmit(I2C_HANDLE,
 80024fc:	f107 020c 	add.w	r2, r7, #12
 8002500:	230a      	movs	r3, #10
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2303      	movs	r3, #3
 8002506:	2198      	movs	r1, #152	@ 0x98
 8002508:	4804      	ldr	r0, [pc, #16]	@ (800251c <AD5693_Init+0x78>)
 800250a:	f7ff f857 	bl	80015bc <HAL_I2C_Master_Transmit>
 800250e:	4603      	mov	r3, r0
 8002510:	747b      	strb	r3, [r7, #17]
			AD5693_ADDRESS, buffer, 3, 10);
	return status;
 8002512:	7c7b      	ldrb	r3, [r7, #17]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000028 	.word	0x20000028

08002520 <AD5693_Set_Voltage>:


HAL_StatusTypeDef AD5693_Set_Voltage(float voltage){
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af02      	add	r7, sp, #8
 8002526:	6078      	str	r0, [r7, #4]

	if(voltage >= AD5693_VREF) voltage = AD5693_VREF;
 8002528:	4921      	ldr	r1, [pc, #132]	@ (80025b0 <AD5693_Set_Voltage+0x90>)
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fa60 	bl	80009f0 <__aeabi_fcmpge>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <AD5693_Set_Voltage+0x1a>
 8002536:	4b1e      	ldr	r3, [pc, #120]	@ (80025b0 <AD5693_Set_Voltage+0x90>)
 8002538:	607b      	str	r3, [r7, #4]

	uint16_t data = voltage / AD5693_VREF * 65535.0;
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fd ff6c 	bl	8000418 <__aeabi_f2d>
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <AD5693_Set_Voltage+0x94>)
 8002546:	f7fe f8e9 	bl	800071c <__aeabi_ddiv>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	a315      	add	r3, pc, #84	@ (adr r3, 80025a8 <AD5693_Set_Voltage+0x88>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	f7fd ffb6 	bl	80004c8 <__aeabi_dmul>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	f7fe f9c2 	bl	80008ec <__aeabi_d2uiz>
 8002568:	4603      	mov	r3, r0
 800256a:	82fb      	strh	r3, [r7, #22]

	// Prepare the command byte
    uint8_t command = WRITE_DAC_N_INPUT_REG;
 800256c:	2330      	movs	r3, #48	@ 0x30
 800256e:	757b      	strb	r3, [r7, #21]

    // Prepare the high and low data bytes
    uint8_t highByte = (data >> 8) & 0xFF;
 8002570:	8afb      	ldrh	r3, [r7, #22]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	b29b      	uxth	r3, r3
 8002576:	753b      	strb	r3, [r7, #20]
    uint8_t lowByte = data & 0xFF;
 8002578:	8afb      	ldrh	r3, [r7, #22]
 800257a:	74fb      	strb	r3, [r7, #19]

    // Combine the command and data into a single 3-byte buffer
    uint8_t buffer[3] = {command, highByte, lowByte};
 800257c:	7d7b      	ldrb	r3, [r7, #21]
 800257e:	733b      	strb	r3, [r7, #12]
 8002580:	7d3b      	ldrb	r3, [r7, #20]
 8002582:	737b      	strb	r3, [r7, #13]
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	73bb      	strb	r3, [r7, #14]

    // Write the 3-byte buffer to the I2C device and return the result
	uint8_t status = HAL_I2C_Master_Transmit(I2C_HANDLE,
 8002588:	f107 020c 	add.w	r2, r7, #12
 800258c:	230a      	movs	r3, #10
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2303      	movs	r3, #3
 8002592:	2198      	movs	r1, #152	@ 0x98
 8002594:	4808      	ldr	r0, [pc, #32]	@ (80025b8 <AD5693_Set_Voltage+0x98>)
 8002596:	f7ff f811 	bl	80015bc <HAL_I2C_Master_Transmit>
 800259a:	4603      	mov	r3, r0
 800259c:	74bb      	strb	r3, [r7, #18]
			AD5693_ADDRESS, buffer, 3, 10);
	return status;
 800259e:	7cbb      	ldrb	r3, [r7, #18]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	00000000 	.word	0x00000000
 80025ac:	40efffe0 	.word	0x40efffe0
 80025b0:	40200000 	.word	0x40200000
 80025b4:	40040000 	.word	0x40040000
 80025b8:	20000028 	.word	0x20000028

080025bc <memset>:
 80025bc:	4603      	mov	r3, r0
 80025be:	4402      	add	r2, r0
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d100      	bne.n	80025c6 <memset+0xa>
 80025c4:	4770      	bx	lr
 80025c6:	f803 1b01 	strb.w	r1, [r3], #1
 80025ca:	e7f9      	b.n	80025c0 <memset+0x4>

080025cc <__libc_init_array>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	2600      	movs	r6, #0
 80025d0:	4d0c      	ldr	r5, [pc, #48]	@ (8002604 <__libc_init_array+0x38>)
 80025d2:	4c0d      	ldr	r4, [pc, #52]	@ (8002608 <__libc_init_array+0x3c>)
 80025d4:	1b64      	subs	r4, r4, r5
 80025d6:	10a4      	asrs	r4, r4, #2
 80025d8:	42a6      	cmp	r6, r4
 80025da:	d109      	bne.n	80025f0 <__libc_init_array+0x24>
 80025dc:	f000 f81a 	bl	8002614 <_init>
 80025e0:	2600      	movs	r6, #0
 80025e2:	4d0a      	ldr	r5, [pc, #40]	@ (800260c <__libc_init_array+0x40>)
 80025e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002610 <__libc_init_array+0x44>)
 80025e6:	1b64      	subs	r4, r4, r5
 80025e8:	10a4      	asrs	r4, r4, #2
 80025ea:	42a6      	cmp	r6, r4
 80025ec:	d105      	bne.n	80025fa <__libc_init_array+0x2e>
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f4:	4798      	blx	r3
 80025f6:	3601      	adds	r6, #1
 80025f8:	e7ee      	b.n	80025d8 <__libc_init_array+0xc>
 80025fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fe:	4798      	blx	r3
 8002600:	3601      	adds	r6, #1
 8002602:	e7f2      	b.n	80025ea <__libc_init_array+0x1e>
 8002604:	08002658 	.word	0x08002658
 8002608:	08002658 	.word	0x08002658
 800260c:	08002658 	.word	0x08002658
 8002610:	0800265c 	.word	0x0800265c

08002614 <_init>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	bf00      	nop
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr

08002620 <_fini>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	bf00      	nop
 8002624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002626:	bc08      	pop	{r3}
 8002628:	469e      	mov	lr, r3
 800262a:	4770      	bx	lr
